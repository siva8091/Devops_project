import requests
import json

# SonarQube server and authentication details
SONARQUBE_URL = 'http://your-sonarqube-server'
API_TOKEN = 'your_api_token'

# Headers for authentication
headers = {
    'Authorization': f'Basic {API_TOKEN}',
    'Content-Type': 'application/json'
}

def get_project_admins(project_key):
    """Get the list of project administrators for a given project."""
    url = f"{SONARQUBE_URL}/api/permissions/users?projectKey={project_key}&permission=admin"
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    admins = response.json().get('users', [])
    return [admin['login'] for admin in admins]

def get_quality_profile(project_key):
    """Get the quality profile details for a given project."""
    url = f"{SONARQUBE_URL}/api/qualityprofiles/search?project={project_key}"
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    profiles = response.json().get('profiles', [])
    return profiles

def grant_quality_profile_edit_permission(profile_key, user_login):
    """Grant edit permission for a quality profile to a user."""
    url = f"{SONARQUBE_URL}/api/qualityprofiles/add_user?profileKey={profile_key}&login={user_login}&permission=profileadmin"
    response = requests.post(url, headers=headers)
    response.raise_for_status()
    return response.json()

def main():
    project_key = 'your_project_key'

    # Get project admins
    admins = get_project_admins(project_key)
    print(f"Project Admins: {admins}")

    # Get project quality profile
    profiles = get_quality_profile(project_key)
    if not profiles:
        print("No quality profiles found for the project.")
        return
    
    for profile in profiles:
        profile_key = profile['key']
        profile_name = profile['name']
        print(f"Quality Profile: {profile_name} (Key: {profile_key})")

        # Grant edit permission to each admin
        for admin in admins:
            result = grant_quality_profile_edit_permission(profile_key, admin)
            print(f"Granted edit permission for profile '{profile_name}' to admin '{admin}'")

if __name__ == "__main__":
    main()
